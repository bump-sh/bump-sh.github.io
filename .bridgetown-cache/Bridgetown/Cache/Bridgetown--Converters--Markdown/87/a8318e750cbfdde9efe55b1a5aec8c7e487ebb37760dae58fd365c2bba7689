I"0<ul id="markdown-toc">
  <li><a href="#common-markdown-syntax-support" id="markdown-toc-common-markdown-syntax-support">Common Markdown syntax support</a></li>
  <li><a href="#titles--headings" id="markdown-toc-titles--headings">Titles &amp; headings</a></li>
  <li><a href="#multi-line-code-blocks-with-language-color-syntax-highlighting" id="markdown-toc-multi-line-code-blocks-with-language-color-syntax-highlighting">Multi-line code blocks with language color syntax highlighting</a></li>
  <li><a href="#information-call-outs" id="markdown-toc-information-call-outs">Information call-outs</a></li>
  <li><a href="#images" id="markdown-toc-images">Images</a>    <ul>
      <li><a href="#image-sizing" id="markdown-toc-image-sizing">Image sizing</a></li>
    </ul>
  </li>
  <li><a href="#markdown-files-as-an-external-reference" id="markdown-toc-markdown-files-as-an-external-reference">Markdown files as an external reference</a></li>
</ul>

<p>Bump supports common Markdown syntax, language color syntax highlighting, and information call-outs. Markdown can be included inside your contract file or as an external reference using dedicated Markdown files. Here’s several options that may help.</p>

<h2 id="common-markdown-syntax-support">Common Markdown syntax support</h2>

<table>
  <thead>
    <tr>
      <th>Formatting</th>
      <th>Markdown Syntax</th>
      <th>Rendering</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bold</td>
      <td><code class="highlighter-rouge">**bold**</code></td>
      <td><strong>bold</strong></td>
    </tr>
    <tr>
      <td>italic</td>
      <td><code class="highlighter-rouge">_italic_</code></td>
      <td><em>italic</em></td>
    </tr>
    <tr>
      <td>link</td>
      <td><code class="highlighter-rouge">[links](https://bump.sh)</code></td>
      <td><a href="https://bump.sh/">links</a></td>
    </tr>
    <tr>
      <td>inline code</td>
      <td><code class="highlighter-rouge">̀ inline code ̀</code></td>
      <td><code class="highlighter-rouge">inline code</code></td>
    </tr>
    <tr>
      <td>highlight</td>
      <td><code class="highlighter-rouge">==highlight==</code></td>
      <td><a href="https://bump.sh/">highlight</a></td>
    </tr>
    <tr>
      <td>strike-through</td>
      <td><code class="highlighter-rouge">~~strikethrough~~</code></td>
      <td><del>strikethrough</del></td>
    </tr>
    <tr>
      <td>footnote</td>
      <td><code class="highlighter-rouge">Footnote[^1]</code></td>
      <td>Footnote[^1]</td>
    </tr>
    <tr>
      <td>quotes</td>
      <td><code class="highlighter-rouge">&gt; quotes</code></td>
      <td>&gt; quotes</td>
    </tr>
  </tbody>
</table>

<h2 id="titles--headings">Titles &amp; headings</h2>

<ul>
  <li>Heading 1: <code class="highlighter-rouge"># A first-level title</code></li>
  <li>Heading 2: <code class="highlighter-rouge">## A second-level title</code></li>
  <li>Heading 3: <code class="highlighter-rouge">### A third-level title</code></li>
</ul>

<h2 id="multi-line-code-blocks-with-language-color-syntax-highlighting">Multi-line code blocks with language color syntax highlighting</h2>

<p>E.g.</p>

<pre><code class="language-undefined">    ```json
    {
      "hello": "world",
      "number": 1,
      "boolean": true
    }
    ```
</code></pre>

<p>will render:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">boolean</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="information-call-outs">Information call-outs</h2>

<p>Bump support information call-outs (of type <code class="highlighter-rouge">info</code>, <code class="highlighter-rouge">warn</code>, <code class="highlighter-rouge">success</code> or <code class="highlighter-rouge">error</code>) with the quote markdown syntax (lines starting with <code class="highlighter-rouge">&gt; </code> ) if the first line contains one of the call-out types.</p>

<p>E.g.</p>

<pre><code class="language-undefined">&gt; info
&gt; this is an important information to **standout**
</code></pre>

<p>will render:</p>

<blockquote class="info">
  <p>this is an important information to <strong>standout</strong></p>
</blockquote>

<h2 id="images">Images</h2>

<p>Use the following syntax to add images in your markdown</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![Alt text](/path/to/image.jpg "Image title")
</code></pre></div></div>

<p>Note that even if it’s a best practice to always add an <a href="https://en.wikipedia.org/wiki/Alt_attribute#Usage">alt text</a> for an image, the parameters <code class="highlighter-rouge">Alt text</code> and <code class="highlighter-rouge">"Image title"</code> are optional.</p>

<h3 id="image-sizing">Image sizing</h3>

<p>If you want to manually set the size of your image you can use Bump.sh <code class="highlighter-rouge">=dimension</code> parameter just before the closing parenthesis as:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![Alt text](/path/to/image.jpg "Image title" =dimension)
</code></pre></div></div>

<p><code class="highlighter-rouge">=dimension</code> uses the following syntax:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=[width][unit]x[height][unit]
</code></pre></div></div>

<p>for instance using <code class="highlighter-rouge">=100pxx50px</code> where</p>
<ul>
  <li><code class="highlighter-rouge">100</code> is the <code class="highlighter-rouge">width</code></li>
  <li><code class="highlighter-rouge">px</code> the <code class="highlighter-rouge">unit</code></li>
  <li><code class="highlighter-rouge">x</code> the <code class="highlighter-rouge">separator</code></li>
  <li><code class="highlighter-rouge">50</code> the <code class="highlighter-rouge">height</code></li>
  <li>second <code class="highlighter-rouge">px</code> is <code class="highlighter-rouge">unit</code> again
will output an image with 100 pixels height and 50 pixels width.</li>
</ul>

<p>At least one <code class="highlighter-rouge">height</code> <em>or</em> <code class="highlighter-rouge">width</code> parameter is mandatory, everything else being optional.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=100pxx50px   # with everything
=100x50       # without unit
=100          # without height (x separator not needed) and unit
=100px        # without height
=x50          # without width and unit
=x50px        # without width
</code></pre></div></div>

<blockquote class="info">
  <ul>
    <li>If you don’t specify a <code class="highlighter-rouge">unit</code> it will default to pixel</li>
    <li>If you don’t specify <code class="highlighter-rouge">width</code> <em>or</em> <code class="highlighter-rouge">height</code>, the other value will be a ratio calculated from the original size of the image so it doesn’t shrink</li>
  </ul>
</blockquote>

<p>You can use any of the following CSS length units as <code class="highlighter-rouge">unit</code>:</p>

<p><strong>Absolute units</strong>:</p>
<ul>
  <li><code class="highlighter-rouge">cm</code> centimeters</li>
  <li><code class="highlighter-rouge">mm</code> millimeters</li>
  <li><code class="highlighter-rouge">in</code> inches (1in = 96px = 2.54cm)</li>
  <li><code class="highlighter-rouge">px</code> pixels (1px = 1/96th of 1in)</li>
  <li><code class="highlighter-rouge">pt</code> points (1pt = 1/72 of 1in)</li>
  <li><code class="highlighter-rouge">pc</code> picas (1pc = 12 pt)</li>
</ul>

<p><strong>Relative units</strong>:</p>
<ul>
  <li><code class="highlighter-rouge">em</code> relative to the font-size of the element (usually 1em = 16px)</li>
  <li><code class="highlighter-rouge">ex</code> relative to the x-height of the current font (rarely used)</li>
  <li><code class="highlighter-rouge">ch</code> relative to the width of the “0” (Unicode U +0030) in the current font</li>
  <li><code class="highlighter-rouge">rem</code> relative to font-size of the root element</li>
  <li><code class="highlighter-rouge">vw</code> relative to 1% of the width of the viewport*</li>
  <li><code class="highlighter-rouge">vh</code> relative to 1% of the height of the viewport*</li>
  <li><code class="highlighter-rouge">vmin</code> relative to 1% of viewport’s* smaller dimension</li>
  <li><code class="highlighter-rouge">vmax</code> relative to 1% of viewport’s* larger dimension</li>
  <li><code class="highlighter-rouge">%</code> relative to the parent element</li>
</ul>

<h2 id="markdown-files-as-an-external-reference">Markdown files as an external reference</h2>

<p>Markdown files can be included as an <a href="../references">external reference</a> within your contract document with the $ref syntax <code class="highlighter-rouge">$ref: "./path/to/local-markdown.md"</code>. In the same way you can extract part of your contract (usually JSON schema of your models into dedicated <code class="highlighter-rouge">*.yaml</code> or <code class="highlighter-rouge">*.json</code> files), you can extract your markdown content into dedicated files too.</p>

<p><strong>E.g.</strong> Your OpenAPI contract <code class="highlighter-rouge">api-contract.yml</code> can thus looks like:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">openapi</span><span class="pi">:</span> <span class="s">3.1.0</span>
<span class="na">info</span><span class="pi">:</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s">Bump API documentation</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">1.0.0</span>
  <span class="na">description</span><span class="pi">:</span>
    <span class="na">$ref</span><span class="pi">:</span> <span class="s2">"</span><span class="s">./docs/introduction.md"</span>
<span class="na">x-topics</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Getting started</span>
    <span class="na">content</span><span class="pi">:</span>
      <span class="na">$ref</span><span class="pi">:</span> <span class="s2">"</span><span class="s">./docs/getting-started.md"</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Use cases</span>
    <span class="na">content</span><span class="pi">:</span>
      <span class="na">$ref</span><span class="pi">:</span> <span class="s2">"</span><span class="s">./docs/use-cases.md"</span>
    <span class="na">example</span><span class="pi">:</span>
      <span class="na">$ref</span><span class="pi">:</span> <span class="s2">"</span><span class="s">./docs/use-cases-examples.md"</span>
<span class="na">servers</span><span class="pi">:</span>
  <span class="s">...</span>
<span class="na">paths</span><span class="pi">:</span>
  <span class="s">...</span>
</code></pre></div></div>

<p>With files <code class="highlighter-rouge">docs/introduction.md</code>, <code class="highlighter-rouge">docs/getting-started.md</code>, <code class="highlighter-rouge">docs/use-cases.md</code> and <code class="highlighter-rouge">docs/use-cases-examples.md</code> right next to your contract document, you will be able to generate a comprehensive API documentation with nicely formatted content for your users.</p>

<p>It’s a great way to include “Topic” sections with handwritten content before the documentation of endpoints/webhooks (or channels in case of an <a href="https://www.asyncapi.com/">AsyncAPI</a> contract) in dedicated Markdown files. Thanks to the <code class="highlighter-rouge">x-topics</code> top-level property in your contract as <a href="doc-topics">explained in the dedicated help page</a>.</p>
:ET