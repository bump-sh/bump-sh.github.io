I"†
<p>One of the greatest new features provided by OpenAPI 3.1 is the support of webhooks. Indeed, a OpenAPI 3.1 documentation may include <code class="highlighter-rouge">paths</code> and / or <code class="highlighter-rouge">webhooks</code>, when <code class="highlighter-rouge">paths</code> were required for previous version.</p>

<p>Every webhook has a required <code class="highlighter-rouge">keyName</code>, and some operations. If we follow this example, provided for OpenAPI 3.1 by <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI Initiative</a>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">webhooks</span><span class="pi">:</span>
  <span class="c1"># Each webhook needs a name</span>
  <span class="na">newPet</span><span class="pi">:</span>
    <span class="c1"># This is a Path Item Object, the only difference is that the request is initiated by the API provider</span>
    <span class="na">post</span><span class="pi">:</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s">A new pet arrived, let's come and discover it IRL.</span>
      <span class="na">requestBody</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s">Information about a new pet in the system</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">application/json</span><span class="pi">:</span>
            <span class="na">schema</span><span class="pi">:</span>
              <span class="na">$ref</span><span class="pi">:</span> <span class="s2">"</span><span class="s">#/components/schemas/Pet"</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s2">"</span><span class="s">200"</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Return a 200 status to indicate that the data was received successfully</span>
</code></pre></div></div>

<p>Here, there is a single webhook whom <code class="highlighter-rouge">keyName</code>  is <code class="highlighter-rouge">newPet</code> , and a <code class="highlighter-rouge">POST</code> operation. If such a documentation was generated by Bump (<a href="https://bump.sh/bump/doc/webhook-example">see live documentation</a>):</p>

<p><img src="/images/help/openapi-webhooks-dark.png" alt="Example webhook rendering" /></p>

<ul>
  <li>Webhookâ€™s name is deduced from the <code class="highlighter-rouge">keyName.</code></li>
  <li>Webhookâ€™s operation name is extracted from field <code class="highlighter-rouge">summary.</code></li>
  <li>As for endpoints, webhook has body parameters, responsesâ€¦ and some <code class="highlighter-rouge">curl</code> and <code class="highlighter-rouge">request payload</code>examples are generated.</li>
</ul>

<p>Furthermore, webhooks are fully compatible with UI customization <strong>How to group operations?</strong></p>

<p>By adding some <code class="highlighter-rouge">tags</code> to your webhooks, you can re-organize how webhooks are named, sorted, and how webhooks operations are sorted.</p>

:ET