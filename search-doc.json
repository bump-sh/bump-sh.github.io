[{"title":"Introducing our GitHub action","type":0,"sectionRef":"#","url":"/product-updates/2020/02/20/introducing-our-github-action/","content":"Deploying your API documentation has never been so simple if you are using GitHub. We have just released our GitHub action, which lets you super easily control when and how you want to deploy your doc. All you have to do is configuring your workflow: steps: - name: Checkout uses: actions/checkout@v2 - name: Deploy API documentation uses: bump-sh/github-action@0.1 with: id: &lt;BUMP_DOC_ID&gt; token: &lt;BUMP_DOC_TOKEN&gt; file: doc/api-documentation.yml You can see it in action on our workflow examples üòé","keywords":""},{"title":"Your whole ecosystem on a single page","type":0,"sectionRef":"#","url":"/product-updates/2020/04/24/introducing-hubs/","content":"Today, we are super excited to release a long-awaited feature: Hubs. You can now create your APIs catalogs, directly from Bump. Highlighted features: custom domain supportdocumentations can be grouped by tagdefault settings at the hub level, applied to all its documentationsauto-creation of hub documentations from your CIand obviously, OpenAPI and AsyncAPI support Hubs are available with our Business plan. Learn more on our help center.","keywords":""},{"title":"Documentation examples for lazy people","type":0,"sectionRef":"#","url":"/product-updates/2020/06/12/enhanced-examples/","content":"What's the first thing you look at when exploring a new tool? If you're as lazy as I am, it's probably the examples. As we think they are one of the most important parts of your documentation, we gave them the attention they deserve. First, we have improved the way we auto-generate examples when missing. We now generate them based on the format of the attribute, for the following formats: email, url, date, date-time and UUID. For requests with a body, we now display the whole body example, just under the cURL command example. And last but not least, copying an example has never been easier: we have added a copy button for cURL and request body examples:","keywords":""},{"title":"Better change summaries","type":0,"sectionRef":"#","url":"/product-updates/2020/07/02/better-change-summaries/","content":"We have enhanced the way we summarize API changes. We now list any changes, at all levels (endpoints, requests, responses, attributes &amp; headers) in the API changelogs and notifications we send. Here an example of a previous summary: Endpoint updated: Versions Endpoint updated: Validations Which now becomes: Updated: POST /docs/{:id}/versions Body attribute added: specification Response added: 200 Responses removed: 201, default Updated: POST /docs/{:id}/validations Body attribute added: specification Response removed: default It is now active for all new deployments. We‚Äôll be recalculating the summaries of previous deployments to make your API changelogs clearer soon.","keywords":""},{"title":"Add a favicon to your documentation","type":0,"sectionRef":"#","url":"/product-updates/2020/11/12/add-a-favicon-to-your-documentation/","content":"Until now, for documentation having a customised logo, the same one was used as a favicon. From now on, you can use a specific one, to brighten up your documentation more than ever! Here is how Bump's documentation looks like now: And icing on the cake: it works for your hub too! Happy enhancement!","keywords":""},{"title":"Show verbs in navigation","type":0,"sectionRef":"#","url":"/product-updates/2020/11/18/show-verbs-in-navigation/","content":"Displaying operations in an endpoint or a channel is sometimes not enough. You can now configure your documentations to show operation verbs in navigation. To enable it, go to your documentation settings &quot;Customize UI&quot; tab, then select &quot;Groups and operations with verbs&quot; in the &quot;Navigation&quot; input.","keywords":""},{"title":"Custom domain for everyone","type":0,"sectionRef":"#","url":"/product-updates/2020/12/01/custom-domain-for-everyone/","content":"You can now configure your custom domain directly from the app. No more manual email to us, just create your CNAME record, fill the form, and voil√†. We also have good news for you: we've updated our pricing plans to allow you to set up custom domains on free plans. One would say it's Christmas, before Christmas. Enjoy!","keywords":""},{"title":"Customize operation URL","type":0,"sectionRef":"#","url":"/product-updates/2021/01/10/customize-operation-url/","content":"OpenAPI provides field servers on OperationObject, as an alternative url to service an operation. If an alternative server object is specified at the Path Item Object or Root level, it will be overridden by this value. cf OpenAPI-Specification From now on, Operations servers are supported to customize your operations examples (in definition and curl example).","keywords":""},{"title":"Depreciation Support","type":0,"sectionRef":"#","url":"/product-updates/2020/11/22/depreciation-support/","content":"We now identify deprecated elements in both OpenApi and AsyncApi specifications, and highlight them in your documentations. We wanted to release it fast, as it was an important missing feature, but this is just the beginning: we have a lot of ideas on how we can enhance deprecation support that we will implement in the upcoming weeks. Want to share some use cases with us? Pick a slot on Anthony's calendar, he will be super glad to hear from you.","keywords":""},{"title":"Hello, OpenAPI webhooks","type":0,"sectionRef":"#","url":"/product-updates/2021/02/04/hello-openapi-webhooks/","content":"OpenAPI 3.1 has been released today. Some important changes are coming with this new version. Above all, the greatest improvement is the support of webhooks, at the same first level than paths. We are glad to announce today that webhooks are now supported by Bump, as you can see in this live example. We hope you'll enjoy this new feature, don't hesitate to have a look to our technical documentation if necessary.","keywords":""},{"title":"Global support of external references","type":0,"sectionRef":"#","url":"/product-updates/2021/03/16/global-support-of-external-references/","content":"As your API grows, your specification becomes more and more complex. At some point, splitting it up into multiple files with $ref references pointing to these external resources can help a lot. We have just released full external references support by updating: our web appour CLI (version 0.7 is out)our GitHub action (version 0.2 is out) Now, no matter the channel you use to deploy a specification, Bump will resolve all references (when possible) and import their content into your documentation. Want to learn more? Have a look at our documentation.","keywords":""},{"title":"Documentations in your pocket","type":0,"sectionRef":"#","url":"/product-updates/2021/05/20/documentation-in-your-pocket/","content":"We now offer a better mobile experience for your documentation if you happen to need it on-the-go. You will also have a navigation menu that allows to access the changelog page. More changes are coming, stay tuned!","keywords":""},{"title":"Ease your sight with dark mode ‚òæ","type":0,"sectionRef":"#","url":"/product-updates/2021/05/23/ease-your-sight-with-dark-mode/","content":"Today we introduce the dark mode to your documentations! Depending on your system settings, your page will appear in a light mode (default) or in a darker scheme. You'll also be able to toggle to light or dark mode regarding your own preferences. We hope you will enjoy the new experience. üëª","keywords":""},{"title":"New Command Line Interface era","type":0,"sectionRef":"#","url":"/product-updates/2021/05/29/new-command-line-interface-era/","content":"","keywords":""},{"title":"Get it while it's hot‚Äã","type":1,"pageTitle":"New Command Line Interface era","url":"/product-updates/2021/05/29/new-command-line-interface-era/#get-it-while-its-hot","content":"npm install -g bump-cli  or download a package directly from the latest Github release assets. "},{"title":"Enjoy the commands‚Äã","type":1,"pageTitle":"New Command Line Interface era","url":"/product-updates/2021/05/29/new-command-line-interface-era/#enjoy-the-commands","content":"bump preview to build as many API documentation preview as you want. bump deploy --dry-run to validate your future API documentation deployment. (‚ö†Ô∏è This is a breaking change compared to our old CLI's and replaces the old bump validate command) bump deploy to deploy your latest API documentation changes. "},{"title":"Download source from your documentation","type":0,"sectionRef":"#","url":"/product-updates/2021/07/13/download-source-from-your-documentation/","content":"We've made it easy for API consumers to download the source of an API documentation. Whether you want to get your hands on a JSON or YAML format, for OpenAPI or AsyncAPI, you're now just a click away.","keywords":""},{"title":"Nested properties get a make up üéÄ","type":0,"sectionRef":"#","url":"/product-updates/2021/06/09/nested-properties-get-a-make-up/","content":"Feedbacks are important to us and we do our best to make you feel heard. We know that accessing nested properties is a pain point for many of you so we tried to make the navigation clearer and the selected element will now stand out more. We'd love to hear from you and see if these changes suit your needs so hit us up with your comments whether you love it or hate it!","keywords":""},{"title":"Share and highlight anything inside your API documentation","type":0,"sectionRef":"#","url":"/product-updates/2021/09/11/share-and-highlight-anything-inside-your-api-documentation/","content":"To give your users the best API onboarding, it often helps to be able to share specific pieces of information. Thanks to this new feature, you can now share and highlight anything in your API documentation with just a click. The selected element will be highlighted following your color theme. Give it a try: https://developers.bump.sh/#post-previews-body","keywords":""},{"title":"Bump diff from your Command Line Interface or your Continuous Integration platform","type":0,"sectionRef":"#","url":"/product-updates/2021/07/02/bump-diff-from-your-cli/","content":"Our new bump diff command has landed in our CLI. Make sure to upgrade your bump-cli package to at least v2.1.0 to test it. Now, straight from your CLI, you are able to describe the changes made in your contract: &gt; bump diff --doc users-account api-specification.yaml Updated: GET /account Response modified: 200 Body attribute added: ticket_ids Added: GET /tickets/{ticket_id} The new command will output a quick summary of what has changed between your latest deployed API contract and the file you have changed locally. If you use Github Actions to launch your automation workflows, we have some more good news for you: we now offer a stable bump-sh/github-action@v1 action. And this latest release includes automatic API contract changelog pushed as a comment for each pull request. Check our help page to get you started with team collaboration on API design.","keywords":""},{"title":"Markdown support","type":0,"sectionRef":"#","url":"/product-updates/2021/09/07/markdown-support/","content":"As markdown is a standard and a common way to bring more readability into your documentation, we have made some improvements on markdown support and bring new features to help you create fast and beautiful API documentations. Bump now supports common Markdown syntax, language color syntax highlighting, and information call-outs. Last but not least, Markdown can be included inside your contract file or as an external reference using dedicated Markdown files. Check our help page to start taking advantage of markdown in your API documentation.","keywords":""},{"title":"Automatic breaking change detection","type":0,"sectionRef":"#","url":"/product-updates/2021/10/03/automatic-breaking-change-detection/","content":"If some changes are more important than others, it is especially true for your API. From now on, we automatically detect if a new version of your API includes some breaking changes. It will be visible in the¬†changelog page, in the¬†changelog email or the brand new RSS feed‚Ä¶ but also during your API design phase while opening a pull request thanks to¬†our Github Action. With Bump, you will never miss a breaking change again.","keywords":""},{"title":"Multiple examples support","type":0,"sectionRef":"#","url":"/product-updates/2021/11/08/multiple-examples-support/","content":"Give your API users a personalized experience and a better understanding of your API while reading your documentation by including multiple examples to your API definition. Bump now supports displaying multiple examples which are supported by both OpenAPI and AsyncAPI specifications.","keywords":""},{"title":"Receive API changelog in your mailbox üîî","type":0,"sectionRef":"#","url":"/product-updates/2021/07/18/receive-api-changelog-in-your-mailbox/","content":"In API documentation, changelogs are important, and your API consumers need to stay up-to-date on recent changes. It's now possible for them to subscribe by email to your API changelog: they will receive a summary of the changelog every week in their mailbox! Want to see it in action on Bump API documentation? See it live Do not hesitate to invite your API consumers to subscribe to your API updates (available at http://{your-doc-url}/changes) Never miss an API change again (now, it's in your mailbox in case you missed it üòâ)","keywords":""},{"title":"Bump live preview","type":0,"sectionRef":"#","url":"/product-updates/2021/10/12/bump-live-preview/","content":"A new --live flag was added to the bump preview command. This gives you the ability to stay focused on your API definition file (OpenAPI or AsyncAPI file) while seeing your Bump preview documentation page being updated as you change the file. No need for a specific text editor, or any extension, just use the bump CLI to preview your documentation live. Learn more about live preview on our help page.","keywords":""},{"title":"Bindings support for AsyncAPI","type":0,"sectionRef":"#","url":"/product-updates/2021/09/16/bindings-support-for-asyncapi/","content":"AsyncAPI users, you'll be happy to know that Bump now supports bindings. As AsyncAPI allows many protocols, which is really nice, bindings are a useful and necessary mechanism to define protocol-specific information. Bump now displays protocol information defined at server, operation, and message levels, as part of an ongoing work for a better understanding of API documentations. Here's an example: https://bump.sh/hub/examples/doc/asyncapi-user-signup#protocol-information","keywords":""},{"title":"Changelog makeover üíÑ","type":0,"sectionRef":"#","url":"/product-updates/2021/09/21/changelog-makeover/","content":"We redesigned the whole changelog page in order to bring you a better understanding of changes history of your API. Here's an example: https://developers.bump.sh/changes","keywords":""},{"title":"Bump diff navigation","type":0,"sectionRef":"#","url":"/product-updates/2021/11/14/bump-diff-navigation/","content":"‚ú® Quickly identify what has changed in your API ‚ú® Jump from change to change! No need to scroll anymore to see the latest changes in your documentation diff. See it in action: https://docs.canopyservicing.com/changes/fbcf9592-a369-4f17-9adb-410d48e3ff98","keywords":""},{"title":"RSS feed for your changelog","type":0,"sectionRef":"#","url":"/product-updates/2021/09/20/rss-feed-for-your-changelog/","content":"In the age of information overload, getting access to information that matters can be quite challenging and that's exactly the purpose of RSS. From now, get notified of the API changes through RSS in addition to the existing email. Give it a try with the Bump RSS feed in your favorite RSS reader.","keywords":""},{"title":"Changelog update","type":0,"sectionRef":"#","url":"/product-updates/2022/01/15/changelog-update/","content":"The API changelog page has been redesigned to give you a clearer view of what has changed inside your API, it is the groundwork of having fine-grained changelog details üïµÔ∏è Hope you will enjoy it! See it in action on our own API documentation: https://lnkd.in/gij9uHUy ‚Ä¢ Bonus point: If you use our github-action, the diff comments have also been updated. Check our latest release for details: https://github.com/bump-sh/github-action/releases/tag/v1.1.0","keywords":""},{"title":"Documentation Access","type":0,"sectionRef":"#","url":"/product-updates/2022/03/20/documentation-access/","content":"Following our recently released Organization feature, the new Documentation Access Management will help control who has access to which documentation or hubs. Three access levels are available: public, private (for your organization only) and protected (limited, password protection). Find more in our Help Center!","keywords":""},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/product-updates/2022/04/02/webhooks/","content":"Today, we‚Äôre introducing Webhooks integration, as a new way to add Bump to your existing workflow. Set them up from your dashboard and receive notifications when events on your API structure are detected on your documentation. Find more in our Help Center!","keywords":""},{"title":"Organization support","type":0,"sectionRef":"#","url":"/product-updates/2022/03/10/organization-support/","content":"Building the best APIs can be a considerable amount of work and you may need your teammates to help. But you definitely do not want one single shared account for that. Freshly out of beta, the awaited Organizations feature helps you with that. We did not reinvent the wheel but wanted to make it as simple but powerful as possible. You can easily customize access with 3 different roles: admin, maintainer, and viewers. Admins can invite and manage access, maintainers can manage hubs and docs, guests are limited to read-only. Available from the Startup plan, we hope it will help teams work efficiently and smoothly on their APIs. You can find out more about Organizations in our Help Center! This update was also the opportunity to ship some enhancements for the dashboard. We can‚Äôt wait to hear about what you think of it so feel free to reach out!","keywords":""},{"title":"Multiple types for properties","type":0,"sectionRef":"#","url":"/product-updates/2022/06/04/multiple-types-for-properties copie/","content":"Here is an update that was released some time ago but out of the radar: we now display all available types (even nullable) on any properties in your OpenAPI or AsyncAPI definition. You‚Äôll now see these correctly displayed properties in your documentation. Multiple types may look like a slight improvement but will add clarification to your team and community. And we have an example to show how great it is (thanks to Meilisearch's documentation).","keywords":""},{"title":"Polymorphism","type":0,"sectionRef":"#","url":"/product-updates/2022/11/14/polymorphism/","content":"They have many names: schema alternatives, discriminator, inheritance... but you probably know them as oneOf, anyOf and allOf. Bump now fully supports polymorphism for AsyncAPI and OpenAPI. You can already upload your latest API specification file to check it out. Or see it in action with our demo documentation of the feature!","keywords":""},{"title":"Improved Access Management","type":0,"sectionRef":"#","url":"/product-updates/2022/12/07/improved-access-management/","content":"Access management has been reshaped, thanks to extended tests and user feedback. Inviting external customers and partners to access internal APIs is now possible directly from the dashboard. From the dedicated section in your hub/documentation settings, you can quickly modify who has access to what. Open it to teammates of your organization, or invite external partners by email directly. Password-protected level will stay available for a limited amount of time. More info can be found in our help center.","keywords":""},{"title":"COLORS","type":0,"sectionRef":"#","url":"/product-updates/2022/05/07/colors/","content":"You already have deployed your API documentation but feel something's missing? You couldn't be more right. Introducing one of the biggest updates to Bump yet: UI Color customization. You read that right. You can now change the primary color of your documentation to make it shine more than ever. Or make it match your logo/company brand! We even added a short preview to help you find the best tone and ensure that you'll keep in mind how it will look in dark mode too. Try it out from your Dashboard &gt; Customize UI and share with us your best results!","keywords":""},{"title":"Branching","type":0,"sectionRef":"#","url":"/product-updates/2022/07/08/branching/","content":"Introducing Branching, a great way to host several versions of an API Specification on the same documentation. If your API has several versions you would like to maintain or if you are working between two environments, branching will make a difference and limit the number of documentation in your hub. Create as many branches as you need, upload files accordingly and find the versions of your API anytime in your documentation, through a small selection menu. Define which branch should be chosen by default, add or delete branches, keep everything up-to-date and share with your ecosystem the best API experience possible.","keywords":""},{"title":"Automated Image Generation","type":0,"sectionRef":"#","url":"/product-updates/2022/09/05/automated-image-generation/","content":"After working so hard on your API and its documentation, the moment has come to share it with the world. We recently released a new social network feature, that helps you create beautiful visuals pointing to your API. You can now upload your own image or leave the work to us to generate a nice one. Sharing your documentation link on social networks will now display your own visual, making it more appealing. Find out more in our Help Center!","keywords":""},{"title":"Search!","type":0,"sectionRef":"#","url":"/product-updates/2022/06/13/search/","content":"Here comes a long-expected new feature: the Search Bar. We know how time-consuming it can be to scroll through long API documentation to find what you are looking for: the Search Bar solves this in a blink of an eye. Our Search engine can look in your documentations and even your hubs on your APIs structures: endpoints, objects, properties, webhooks, etc... And to make it more comfortable, we sort them by types (and it looks great, seriously). We are already working on two limitations: you cannot search in your spec history and we are lacking advanced filters. Discoverability is an important topic on our end. We want to help teams and communities deep dive into their API ecosystem, making them easier to find and use. We will have a lot more to announce soon and we are preparing a small blog post on this feature‚Äôs making-of. We hope you‚Äôll enjoy the Search Bar: feel free to reach out if you have any feedback or suggestion! P.S. Search will be activated on your documentation/hub after the next deploy but please contact us if you need it before this as we can manually activate it.","keywords":""},{"title":"Lightning-fast API Documentation rendering","type":0,"sectionRef":"#","url":"/product-updates/2023/06/03/lightning-fast-api-documentation-rendering/","content":"Fast-loading page is a must these days, both for human users and search engines. Thanks to the new rendering engine, which has already been released to 100% of our users, navigating your API documentation is now a breeze. It provides an optimal experience for all API consumers, whatever the size of the documentation (yes, any size). Performance is significantly better: the first interactive content is as fast as the blink of an eye, which also means there's no more blocking time when you first navigate the API documentation.","keywords":""},{"title":"Enhanced Specifications Support","type":0,"sectionRef":"#","url":"/product-updates/2023/01/27/enhanced-specifications-support/","content":"","keywords":""},{"title":"minLength, maxLength and pattern‚Äã","type":1,"pageTitle":"Enhanced Specifications Support","url":"/product-updates/2023/01/27/enhanced-specifications-support/#minlength-maxlength-and-pattern","content":"Wherever you need to document restrictions on string fields, OpenAPI and AsyncAPI specifications rely on JSON Schema to support this.minLength and maxLength are meant to constrain the length of a string.pattern restrict the string to a specific Regular Expression (regex). Email addresses, IBANs and ZIP/Postal codes could be great examples of these features.  "},{"title":"readOnly and writeOnly properties‚Äã","type":1,"pageTitle":"Enhanced Specifications Support","url":"/product-updates/2023/01/27/enhanced-specifications-support/#readonly--and--writeonly--properties","content":"JSON Schema allows defining a property as readOnly or writeOnly. Many examples can easily be imagined when used with AsyncAPI or OpenAPI : readOnly timestamp, writeOnly password, etc... Our Help Center shares more details on how Bump.sh works with this feature and a few examples. "},{"title":"Bump.sh Documentation","type":0,"sectionRef":"#","url":"/help/","content":"","keywords":""},{"title":"Manage your documentation and access‚Äã","type":1,"pageTitle":"Bump.sh Documentation","url":"/help/#manage-your-documentation-and-access","content":"Hubs -- Create groups of documentation.Access Management -- Setup who can access what in your hubs and docs.Organizations -- Invite teammates or partners to your ecosystem. "},{"title":"Customization‚Äã","type":1,"pageTitle":"Bump.sh Documentation","url":"/help/#customization","content":"Custom domain -- Host your documentation under your own domain.Documentation Topics -- Add context and information to your specification files.Meta images -- Share docs links on your social medias. "},{"title":"Branching","type":0,"sectionRef":"#","url":"/help/branching/","content":"","keywords":""},{"title":"Documentation vs. Branch‚Äã","type":1,"pageTitle":"Branching","url":"/help/branching/#documentation-vs-branch","content":"Branches are a great solution for existing documentation that could need several versions. Instead of creating new documentation in your hub (for an updated version of your API specification for example), branching allows your users to switch from one version of your documentation to another easily. You may imagine using branching to maintain several versions of your API specifications, for users still on a legacy version. We can also imagine API documentation using branching for a production environment and a testing one. Visually, documentation readers will see the available branches from which they can switch as seen in the screenshot below:  "},{"title":"Create a new branch‚Äã","type":1,"pageTitle":"Branching","url":"/help/branching/#create-a-new-branch","content":"From your Dashboard, select the documentation you would like to add a new version. Then select Branches and type its new name.  "},{"title":"Modifying an existing branch‚Äã","type":1,"pageTitle":"Branching","url":"/help/branching/#modifying-an-existing-branch","content":""},{"title":"Rename or delete a branch‚Äã","type":1,"pageTitle":"Branching","url":"/help/branching/#rename-or-delete-a-branch","content":"From your Dashboard &gt; Documentation, select Branches and the one you would like to rename or delete. danger Deleting a branch is definitive: you will lose the branch, its content and deployment history.  "},{"title":"Upload a new version of an existing branch‚Äã","type":1,"pageTitle":"Branching","url":"/help/branching/#upload-a-new-version-of-an-existing-branch","content":"When uploading a new version of your API specification, you can choose which branch will receive the update.  "},{"title":"API change management","type":0,"sectionRef":"#","url":"/help/api-change-management/","content":"","keywords":""},{"title":"Automatic API changelog‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#automatic-api-changelog","content":"Bump automatically builds a changelog for your API. Each time you upload a new version of your API definition, you will have a new event in your changelog. A link to the changelog page is available on each documentation:  As you can see below on the Bump API changelog, every changes we made are listed: whether it's a structural change (endpoint or parameter removed, modified or added for example) or a content change (description or example modification).  "},{"title":"Breaking changes identification‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#breaking-changes-identification","content":"Bump automatically identifies when a change is breaking for your API consumers. Here are the changes considered as breaking: Rename or delete endpoint, unless it was deprecated beforeRename or delete a property (body, header or query parameter), unless it was deprecated beforeModify the type of a propertySet an existing property as requiredAdd or delete a security requirement "},{"title":"Changes notification‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#changes-notification","content":"Bump can notify changes via Slack, email, RSS or any custom HTTP webhook. "},{"title":"Slack‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#slack","content":"Each time your API changes, you can notify your team directly on Slack by activating the Slack integration in your API integrations settings:  "},{"title":"Email‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#email","content":"Users can subscribe to your API changelog and receive a weekly digest.  "},{"title":"RSS‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#rss","content":"The changelog page exposes an RSS feed your users can subscribe to. Here is an example with the Bump API changelog. "},{"title":"Webhooks‚Äã","type":1,"pageTitle":"API change management","url":"/help/api-change-management/#webhooks","content":"You can define as many webhooks as you wish to receive structural changes when they occur on your documentations. Please check the dedicated page to find out how to setup a webhook. GitHub integration With our Github Action, you can receive automatic API diff comments directly in your pull requests. This pull request comment will include: a diff summaryinformation about the breaking change statea link to a visual diff page  "},{"title":"Continuous integration","type":0,"sectionRef":"#","url":"/help/continuous-integration/","content":"","keywords":""},{"title":"Integrate with your CI‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#integrate-with-your-ci","content":"Here, we are presenting the process recommended to our customers, but feel free to adapt it to your own workflow/requirements. We recommend two steps in your automation flow: a validation one during development, followed by a deployment one on production merges. "},{"title":"1. API diff & validation of the documentation file‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#1-api-diff--validation-of-the-documentation-file","content":""},{"title":"API diff for each proposed change request‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#api-diff-for-each-proposed-change-request","content":"With our Github Action, you can receive automatic API diff comments directly on your pull requests. This is done thanks to the bump diff command under the hood which will run each time a pull request is created or updated. It will make sure to fail the build if the documentation file is not valid. "},{"title":"Plain validation‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#plain-validation","content":"If you don't use Github, for each branch of your code base you can check that your documentation file is still valid and will not fail during deployment. By using the bump deploy --dry-run command each time a branch is pushed you will make sure to fail the build if the documentation file is not valid. You can also use the bump diff command to validate your documentation file and to output the API diff in your CI logs. "},{"title":"2. Deploy your doc‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#2-deploy-your-doc","content":"Once your branch has been merged into your main branch (generally the master or main one) you will want to deploy your new documentation file and make it live. You will use the bump deploy command. "},{"title":"Add our CLI tool to your project‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#add-our-cli-tool-to-your-project","content":"The simplest way to use our CLI tool is to add a package.json file to your project. You can find an example here: https://github.com/bump-sh/bump-ci-example/blob/master/package.json. If you prefer not using a package.json, be sure to install the CLI globally with npm install -g bump-cli before calling the bump command. "},{"title":"Examples‚Äã","type":1,"pageTitle":"Continuous integration","url":"/help/continuous-integration/#examples","content":"Here are examples for integrating Bump with the most commonly used CI products: CircleCI : https://github.com/bump-sh/bump-ci-example/blob/master/.circleci/config.ymlGitlab CI: https://github.com/bump-sh/bump-ci-example/blob/master/.gitlab-ci.yml Travis CI: https://github.com/bump-sh/bump-ci-example/blob/master/.travis.ymlGitHub Action: https://github.com/bump-sh/github-action The GitHub action example uses a dedicated action we crafted especially for you. You may find more information on our GitHub market place page. Note that if you don't want to keep the private token and id in your code base, you should use environment variables. Our CLI automatically recognizes these 3 variables: BUMP_ID: your documentation public slug or idBUMP_TOKEN: your documentation private tokenBUMP_HUB_ID: if using hubs, your hub public slug or id "},{"title":"Access Management","type":0,"sectionRef":"#","url":"/help/access-management/","content":"","keywords":""},{"title":"Private level‚Äã","type":1,"pageTitle":"Access Management","url":"/help/access-management/#private-level","content":"Private level allows members from the same organization to have access to a documentation/hub. Writing permissions will only be granted if the member has admin/maintainer role. From private level, you can also invite external users (like partners, customers, etc...) to a read-only mode of your documentation/hub.  "},{"title":"About depreciation of the Password-Protected level‚Äã","type":1,"pageTitle":"Access Management","url":"/help/access-management/#about-depreciation-of-the-password-protected-level","content":"From our tests and user reviews, we felt that password protection was not relevant anymore and could cause confusion in the future. For this reason, it will be soon deprecated and users will be contacted directly to inform them in advance. "},{"title":"Bump CLI","type":0,"sectionRef":"#","url":"/help/bump-cli/","content":"","keywords":""},{"title":"Installing Bump CLI‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#installing-bump-cli","content":"Bump CLI is a node package, currently distributed via NPM which means you need to have Node v12+ interpreter installed on your computer and servers. info You can download a standalone package directly from the latest Github release assets if you don't use Node. We plan to distribute universal binaries to common package managers soon. Please check our installation methods for updates. "},{"title":"Global installation‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#global-installation","content":"To install it globally, run the following command with NPM npm install -g bump-cli  Or, with Yarn via yarn global add bump-cli  "},{"title":"Add Bump CLI to your node project‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#add-bump-cli-to-your-node-project","content":"As our CLI is a node package, you can easily embed it to your project by adding the package to your package.json file, either via NPM npm install --save-dev bump-cli  Or via Yarn yarn add --dev bump-cli  You can then use any Bump CLI commands via npm exec as such npm exec -- bump --help  "},{"title":"How should I do if I'm not using Node ?‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#how-should-i-do-if-im-not-using-node-","content":"Unfortunately, at the moment we only support the Node environment. However we plan to distribute universal binaries in the most common package managers very soon. In the meantime, you can download a standalone package directly from the latest Github release assets or you can push your documentation using our API. "},{"title":"Using Bump CLI‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#using-bump-cli","content":"To list all the available commands, just type bump in your command line environment. You can get some help anytime by using --help on any command. Example: bump deploy --help . "},{"title":"Preview a file‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#preview-a-file","content":"When writing a documentation, you'll want to preview how it renders on Bump. This is exactly the goal of the preview command: it will create a temporary documentation with a unique URL, which will be available for a short period of time. Usage from a local OpenAPI or AsyncAPI file bump preview path/to/file.json  You can also preview a file available from a URL bump preview https://developers.bump.sh/source.yaml  "},{"title":"Live preview‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#live-preview","content":"By using the --live flag you can stay focused on API design (OpenAPI or AsyncAPI file) while seeing a continuously updated preview each time you save your API definition file. Launch the live preview command in your terminal bump preview --live --open openapi-definition.json  Edit your openapi-definition.json file in your favorite text editorWatch the live preview being updated each time your save your file! info You can create as many previews as you like without being authenticated. This is a free and unlimited service. "},{"title":"API diff or simple validation before a deployment‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#api-diff-or-simple-validation-before-a-deployment","content":"This is mainly used when you integrate Bump in your automated environments (Continuous Integration). It will validate your documentation file to make sure it is parsed correctly by Bump. If you want to validate your API specification file before a deployment, you can either use: the bump diff command if you also want to have a human diff summary of your API change or the bump deploy --dry-run command if you only want to make sure the file is valid "},{"title":"API diff of your changes‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#api-diff-of-your-changes","content":"This command will output a diff summary of what has changed in the API. It can be used to ensure that future file deployment will work smoothly and to get a human diff summary during code reviews. bump diff path/to/file.json --doc my-documentation  You can find your own my-documentation slug from your documentation settings. caution You will need to pass your private documentation access token for this command to work. Either with the --token flag or via the BUMP_TOKEN environment variable. This token can be found from your documentation settings &gt; CI deploymentpage "},{"title":"Validation before a deployment‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#validation-before-a-deployment","content":"If you don't need a diff summary from the bump diff command explained above, you can also make sure your API specification file is valid and parsed correctly by Bump with the bump deploy --dry-run command. It can be used to ensure that future file deployment will work smoothly. bump deploy --dry-run path/to/file.json --doc my-documentation  You can find your own my-documentation slug from your documentation settings. caution You will need to pass your private documentation access token for this command to work. Either with the --token flag or via the BUMP_TOKEN environment variable. This token can be found from your documentation settings &gt; CI deploymentpage "},{"title":"Deploy a file‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#deploy-a-file","content":"Once your documentation has been updated and merged, you want it to be live for your API users. This is what the deploy command is for. When deploying the new version, Bump will analyse your API structure and will generate a changelog item if the API structure has changed. bump deploy path/to/file.json --doc my-documentation  You can find your own my-documentation slug from your documentation settings. You can also deploy a given file to a different branch of your documentation with the --branch &lt;branch-name&gt; parameter. The branch will be created if it doesn't exist. More details about the branching feature is available on this dedicated help page. bump deploy path/to/file.json --doc my-documentation --branch staging  caution You will need to pass your private documentation access token for this command to work. Either with the --token flag or via the BUMP_TOKEN environment variable. This token can be found from your documentation settings &gt; CI deploymentpage. "},{"title":"Compatible specification types‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#compatible-specification-types","content":"We currently support OpenAPI from 2.0 (called Swagger) to 3.1 and AsyncAPI 2.x specification file types. Both YAML or JSON file formats are accepted file inputs to the CLI. "},{"title":"Contributing‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#contributing","content":"Bug reports and pull requests are welcome on GitHub at https://github.com/bump-sh/cli. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct. "},{"title":"License‚Äã","type":1,"pageTitle":"Bump CLI","url":"/help/bump-cli/#license","content":"The Bump CLI project is released under the MIT License. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/help/api-change-management/webhooks/","content":"","keywords":""},{"title":"Setup‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#setup","content":""},{"title":"Step 1:‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#step-1","content":"Select the Integrations tab from your Bump‚Äôs dashboard to reach the webhook section.  "},{"title":"Step 2:‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#step-2","content":"After adding your webhook, a confirmation will be displayed. From this screen, you can modify the payload URL and find the secret token to be used (which helps to secure requests coming from Bump).  Here is a pseudo-code (in Ruby language) which you should implement in your server if you want to check the authenticity of the received payload: def verify_signature(payload_body) signature = &quot;sha256=&quot; + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new(&quot;sha256&quot;), ENV[&quot;SECRET_TOKEN&quot;], payload_body) return halt 500, &quot;Signatures didn't match!&quot; unless Rack::Utils.secure_compare(signature, request.env[&quot;HTTP_X_BUMP_SIGNATURE_256&quot;]) end  "},{"title":"Step 3:‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#step-3","content":"The Recent deliveries section include a Test Webhook element that helps you verify that the webhook works correctly. You can also check the 10 last notifications.  "},{"title":"Payload content‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#payload-content","content":"Details about the payload content sent for each setup webhooks is available in our absolutely gorgeous API documentation. "},{"title":"Delete a webhook‚Äã","type":1,"pageTitle":"Webhooks","url":"/help/api-change-management/webhooks/#delete-a-webhook","content":"To stop receiving notifications, you can delete a webhook by selecting it from the Integrations section and then confirm the deletion in the Danger zone.  "},{"title":"Topics","type":0,"sectionRef":"#","url":"/help/doc-topics/","content":"Topics Creating good API documentation requires giving users context and guides. As most of the specifications don't permit to add generic content, we have created a custom property. Setting the x-topics property at the root of your documentation specification will let you add some content sections at the beginning of your documentation. Property\tDescriptiontitle\tTopic title as it will appear in the navigation bar and in the content section. content\tThe topic content. Markdown is fully supported here. example\tWill appear in the examples section, if activated. Markdown is fully supported here. Example: x-topics: - title: Getting started content: Before using the API you need to get an API key by sending us an email. - title: Authentication content: Send the `X-API-KEY` header with all your requests. example: | ``` $ curl \\ -X POST https://api.example.com/endpoint/ \\ -H &quot;X-API-KEY: XXXXXX&quot; \\ ``` ","keywords":""},{"title":"FAQ","type":0,"sectionRef":"#","url":"/help/faq/","content":"","keywords":""},{"title":"Will you support others specifications like BluePrint or GraphQL?‚Äã","type":1,"pageTitle":"FAQ","url":"/help/faq/#will-you-support-others-specifications-like-blueprint-or-graphql","content":"When we initially had the Bump idea, we though that it would be absolutely perfect to be able to handle any kind of documentation. This said, at the moment, we are focusing on OpenAPI and AsyncAPI to offer the best support of these specifications. "},{"title":"Why not supporting all the OpenAPI specification?‚Äã","type":1,"pageTitle":"FAQ","url":"/help/faq/#why-not-supporting-all-the-openapi-specification","content":"If you have tried Bump, you probably have already discovered that we don't support the whole Swagger / OpenApi specification. There are 2 reasons for that: first, we are a fresh new project, which is far from being complete. So we may have decided to postpone some features due to our priorities.second, we may have decided that a specification feature adds too much complexity to the documentation, and have preferred to simply ignore it to keep things simple for now. Feel free to ask us why a feature you need is missing, we'll be happy to answer and try to find a solution with you. "},{"title":"Custom domains","type":0,"sectionRef":"#","url":"/help/custom-domains/","content":"","keywords":""},{"title":"Setting a CNAME record‚Äã","type":1,"pageTitle":"Custom domains","url":"/help/custom-domains/#setting-a-cname-record","content":"First, you'll need to create a CNAME record pointing to custom.bump.sh, at your domain name provider. For instance, if you want to host your documentation under the developers.example.com domain, you will create the following record: developers.example.com. 3600 IN CNAME custom.bump.sh.  Once this is done, you can set your custom domain in Bump.sh. "},{"title":"Setting a custom domain in Bump.sh‚Äã","type":1,"pageTitle":"Custom domains","url":"/help/custom-domains/#setting-a-custom-domain-in-bumpsh","content":"Click on the chosen Documentation &gt; SettingsCheck the Setup a custom domain box.Enter your custom domain.Click Update global settings. That's it. SSL certificates are automatically issued. Note: DNS caches may take a moment to update. Outdated caches may lead to the fact that visitors will not be able to access your docs via your custom domain. Those caches are user-side, which means that 1. you can flush it on your local computer 2. people who never visited your doc will not face any issue. "},{"title":"how-can-bump-help","type":0,"sectionRef":"#","url":"/help/how-can-bump-help/","content":"","keywords":""},{"title":"Specifications‚Äã","type":1,"pageTitle":"how-can-bump-help","url":"/help/how-can-bump-help/#specifications","content":"Bump.sh supports OpenAPI or AsyncAPI specification: you can deploy your API documentation in a few minutes. "},{"title":"Customization‚Äã","type":1,"pageTitle":"how-can-bump-help","url":"/help/how-can-bump-help/#customization","content":"Custom domains, branding, colors, branching, Markdown support... you name it: Bump.sh offers many possibilities to make your documentation truly yours. "},{"title":"Track changes‚Äã","type":1,"pageTitle":"how-can-bump-help","url":"/help/how-can-bump-help/#track-changes","content":"Share a link to your documentation with your API consumers and help them never miss an API change again. They can track API structural changes if they subscribe by email. Once a week, subscribers will receive a changelog digest of your documentation if your API has changed. "},{"title":"CLI and Integration‚Äã","type":1,"pageTitle":"how-can-bump-help","url":"/help/how-can-bump-help/#cli-and-integration","content":"We suggest integrating our tool into your development process to make the most out of Bump. We offer a Command Line Interface and Continuous Integration examples to let you: view API diff during code review thanks to our GitHub Action, Bump will automatically comment on your pull requests with changes digest, then once merged we will deploy your changes directly your documentation page. "},{"title":"Hubs and Collaboration‚Äã","type":1,"pageTitle":"how-can-bump-help","url":"/help/how-can-bump-help/#hubs-and-collaboration","content":"If you work in a multiple services environment and have many different APIs, we got you covered. You can organize and mix your OpenAPI and AsyncAPI-based documentation, in a developer Hub. You will thus have all of your APIs listed in one place. Work with your team and partners through Organizations and use our Access Management to check who can access what. "},{"title":"Hubs","type":0,"sectionRef":"#","url":"/help/hubs/","content":"","keywords":""},{"title":"Deploying inside a hub using our CLI‚Äã","type":1,"pageTitle":"Hubs","url":"/help/hubs/#deploying-inside-a-hub-using-our-cli","content":"Hubs provide their own authentication token. You can deploy an existing hub documentation using either its own authentication token, or the hub one. bump deploy your/doc.yml --doc my-doc --hub hub-slug-or-id --token my-doc-token bump deploy your/doc.yml --doc my-doc --hub hub-slug-or-id --token hub-token  "},{"title":"Default settings‚Äã","type":1,"pageTitle":"Hubs","url":"/help/hubs/#default-settings","content":"You can define default settings at the hub level. These settings will be then used by the hub's documentations. You can define: logocolor schemegrouping strategy (group by tag or by path)navigation mode (1 or 2 levels navigation) The default settings can be overridden at the documentation level by selecting specific values in the documentation settings tab. "},{"title":"Group documentations by tag‚Äã","type":1,"pageTitle":"Hubs","url":"/help/hubs/#group-documentations-by-tag","content":"You can display hub's documentations grouped by tag instead of a global list. Select &quot;Group documentations by tag&quot; in your hub's UI settings, and fill tags for each documentation. You can add multiple tags to a documentation. It will be displayed under each associated tag on the hub. "},{"title":"Auto create the documentation‚Äã","type":1,"pageTitle":"Hubs","url":"/help/hubs/#auto-create-the-documentation","content":"You can create a documentation on the fly by using the --auto-create CLI option. When deploying, if the documentation doesn't exist yet, a new one will be created with your hub defaults, the given slug (provided with --doc) and documentation name (--doc-name). bump deploy your/doc.yml --auto-create --doc my-doc --hub hub-slug-or-id --token hub-token  In this case, you have to provide the following parameters: --auto-create: activate the auto-creation mode--doc: the documentation slug (url) you want to use--doc-name (optional): the documentation name you want to use. Automatically generated from documentation's slug if missing.--hub: the hub slug (or id)--token: the hub token "},{"title":"Single Sign-On (SSO)","type":0,"sectionRef":"#","url":"/help/organizations/single-sign-on-sso/","content":"","keywords":""},{"title":"Activating SSO for your organization‚Äã","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/help/organizations/single-sign-on-sso/#activating-sso-for-your-organization","content":"SSO is available on our Business plans. Once you have purchased a Business plan, please reach out to our support team to have the feature activated on your account. We will send you a URL that will let you complete the configuration, picking the Identity and Access Management solution you need.  "},{"title":"Configuring user permissions‚Äã","type":1,"pageTitle":"Single Sign-On (SSO)","url":"/help/organizations/single-sign-on-sso/#configuring-user-permissions","content":"By default, all users who get access to Bump.sh via the configured SSO will have the ‚ÄúViewer‚Äù Role/Permission. The Organization Owner may configure different permission levels for each user via the Bump.sh administration user interface. "},{"title":"Organizations","type":0,"sectionRef":"#","url":"/help/organizations/","content":"","keywords":""},{"title":"Create a new organization‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#create-a-new-organization","content":"You can easily create an organization from your dashboard. Select the settings section and the organization tab. From here, you can create an organization or manage the ones you own.  Select &quot;Create Organization&quot; to start a new one. You'll need to name it and choose its slug.  "},{"title":"Member management‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#member-management","content":"Once your organization is created, you may want to invite teammates and guests (which is the point, actually). When you invite a new member, you'll have to select a role before sending the invitation. Each role has its own permissions, detailed below. Roles can be modified at anytime. Role/Permission\tAdmin\tMaintainer\tViewerDocumentation access\t‚úì\t‚úì\t‚úì Hubs access\t‚úì\t‚úì\t‚úì Documentation management\t‚úì\t‚úì Hubs management\t‚úì\t‚úì Organization management\t‚úì Member management\t‚úì   Billing and invoice are only managed by the owner of the organization. "},{"title":"Organization management‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#organization-management","content":"From your dashboard, you can manage the organizations you own and those you have admin role. Organization settings allow you to change its name and URL, transfer ownership to an active member or completely delete the organization.  caution Transferring ownership is mandatory if you want to leave an organization. You can only transfer ownership to a member with admin role. caution If you choose to close your Bump account but are still the owner of an organization, a warning message will be displayed. Please consider transferring ownership if necessary. danger Deleting an organization will definitively erase its documentation and hubs. We cannot restore deleted content. "},{"title":"Organizations FAQ‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#organizations-faq","content":""},{"title":"How many members can I invite to my organization?‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#how-many-members-can-i-invite-to-my-organization","content":"The sky is the limit! You can invite as many members as you want to your organizations. "},{"title":"I've invited the wrong person!‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#ive-invited-the-wrong-person","content":"No worries, you can cancel a pending invitation at anytime (or even resend the invitation email). If the invitation has been accepted, you can still revoke access in a few clicks. "},{"title":"I can't access my organization/documentation anymore!‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#i-cant-access-my-organizationdocumentation-anymore","content":"This is most likely due to an organization created during a trial that has not been switched to a paid plan. Organization is a feature available from the Startup plan. If you are in such a situation, please reach us, we'll try to find the most suitable solution for you and your team! "},{"title":"Organizations are great but I need this another specific feature to work with my team.‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#organizations-are-great-but-i-need-this-another-specific-feature-to-work-with-my-team","content":"Organizations are a brand new feature we plan to polish with time. We're always open to feedback or suggestions, so please feel free to contact us anytime to discuss what would fit your needs the best. "},{"title":"I would like to move one of my documentation/hubs from my personal space to an organization.‚Äã","type":1,"pageTitle":"Organizations","url":"/help/organizations/#i-would-like-to-move-one-of-my-documentationhubs-from-my-personal-space-to-an-organization","content":"If you cannot perform this operation on your end yet, we can surely do this for you. Contact us and we will take care of this! "},{"title":"Meta images","type":0,"sectionRef":"#","url":"/help/meta-images/","content":"","keywords":""},{"title":"Add your own image‚Äã","type":1,"pageTitle":"Meta images","url":"/help/meta-images/#add-your-own-image","content":"From your dashboard, select the documentation you would like to edit. If this documentation belongs to a hub, you'll need to select the hub directly. From the documentation settings, select Customize UI, reach the Social Media section and upload or drop the image you would like to use.  "},{"title":"Use the automated image generation‚Äã","type":1,"pageTitle":"Meta images","url":"/help/meta-images/#use-the-automated-image-generation","content":"In case you wouldn't have a visual you could use, Bump will automatically generate an image for social media. This visual display your documentation name (or the hub name, in such case), its logo and its type.  info The social media image will be modified each time you change the name or the logo. caution First generation of this new social media image may take a bit, but any modification or change will start the generation process. You can also reach our Support to push this new feature. "},{"title":"Specifications Support","type":0,"sectionRef":"#","url":"/help/specifications-support/","content":"Specifications Support Bump.sh supports the most popular specifications for REST APIs and Event-Driven APIs. OpenAPI SpecificationAsyncAPI Specification We do plan to support more specifications in the future. If there is one specifically you're looking for, feel free to contact us!","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/help/getting-started/","content":"","keywords":""},{"title":"Create your first documentation‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#create-your-first-documentation","content":""},{"title":"Step 1: Create your space/documentation‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#step-1-create-your-spacedocumentation","content":"After creating your account, you'll be asked to create and name your first API documentation. By default, your documentation URL will use the same name: you can customize it in the slug field. You can also use custom domains, which we'll explain later.  "},{"title":"Step 2: Upload your file‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#step-2-upload-your-file","content":"If you already have a specification file, you can immediately upload it. You can also use our examples to see Bump.sh in action. Finally, our CLI can also be directly used to jump in.  "},{"title":"Step 3: Enjoy‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#step-3-enjoy","content":"Generating your first documentation will take a few seconds. But let's not stop here: many features are awaiting to customize and make the most of your API documentation. Let's have a look in the next section. "},{"title":"Publish your documentation‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#publish-your-documentation","content":"Congratulations on releasing your first API documentation on Bump.sh! One of the first things you may have in mind is how to share your documentation with the world, your team or keep it for yourself. Bump.sh offers several options to manage access to your documentation. During the onboarding, you may have noticed the option of making your doc public or private. Public documentation are available to anyone with the URL or if the search engine indexation has been activated. Private ones are only accessible to you (or your team/organization if you have one). We share more details on the Access Management page. "},{"title":"Customization options‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#customization-options","content":"With your documentation ready, you could want to make it more customized. Bump.sh offers several options to do so. You can setup Custom Domains, to make your doc available behind your own URL. Several branding options are available: from your logo to Meta Images (that helps sharing your doc in a fancy way). We also support Documentation Topics, that helps you adding rich (con)text to your API doc, sharing the informations your community needs.  "},{"title":"And way more‚Äã","type":1,"pageTitle":"Getting Started","url":"/help/getting-started/#and-way-more","content":"We do not stop here. Feel free to browse this documentation or directly reach us to find out how to make the most of Bump.sh. There's a lot more to cover: from Hubs that groups several API documentation to Branching, hosting several version of a same doc, you'll find many simple options that make a huge change. The team is always here to listen if you have any feature requests or suggestions. We are here to help. We hope you'll enjoy using Bump.sh! "},{"title":"AsyncAPI Support","type":0,"sectionRef":"#","url":"/help/specifications-support/asyncapi-support/","content":"","keywords":""},{"title":"Current support state‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#current-support-state","content":"Event driven APIs world is more complex than REST APIs one: there are more protocols, more tools, more different architectures. As a consequence, AsyncAPI is more complex that OpenAPI to support. We wanted to open our beta fast, so we have chosen to release it with minimal features. "},{"title":"Currently supported‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#currently-supported","content":"Bump is able to extract: root properties (AsyncAPI Object)channels (with automatic grouping according to channel name or tag grouping)operations (subscribe and publish)messages (payload and headers), with examples.bindings (server, operation and message). "},{"title":"Partially supported: message object payload‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#partially-supported-message-object-payload","content":"Message#payload could be of any type according to the specification, but we only support SchemaObject type. "},{"title":"Partially supported: server security and securitySchemes‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#partially-supported-server-security-and-securityschemes","content":"We support AsyncAPI securitySchemes property with these authentication types: httpapiKeyhttpApiKeyoauth2openIdConnect We do not support X509, symmetricEncryption, asymmetricEncryption, plain, scramSha256, scramSha512 nor gssapi. To describe these authentication types, please use our custom x-topics property for now. "},{"title":"readOnly and writeOnly properties‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#readonly-and-writeonly-properties","content":"JSON Schema provide possibility to declare a property as read or write Only, with boolean fields writeOnly and readOnly (cf JSON Schema documentation). Basically, in Async API context, it means that a writeOnly property makes sense in request only (as password for example). Thus, we decided to hide a property defined as writeOnly when it belongs to a subscribe operation (messages produced by the application and sent to the channel). And a readOnly makes sense in response only (as created_at, updated_at, your call...). Similarly, we decided to hide a property defined as readOnly when it belongs to a publish operation (messages consumed by the application from the channel). Thus, it becomes easy to use the same Schema Object in different context, for example as seen below: &quot;schema&quot;: { &quot;properties&quot;: { &quot;password&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;password&quot;, &quot;writeOnly&quot;: true }, &quot;created_at&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;date-time&quot;, &quot;readOnly&quot;: true } } }  "},{"title":"Add topics to your documentation‚Äã","type":1,"pageTitle":"AsyncAPI Support","url":"/help/specifications-support/asyncapi-support/#add-topics-to-your-documentation","content":"As this is not supported by AsyncAPI, we created a custom property to enrich your documentation. Find out more in our dedicated section. "},{"title":"Markdown support","type":0,"sectionRef":"#","url":"/help/specifications-support/markdown-support/","content":"","keywords":""},{"title":"Common Markdown syntax support‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#common-markdown-syntax-support","content":"Formatting\tMarkdown Syntax\tRenderingbold\t**bold**\tbold italic\t_italic_\titalic link\t[links](https://bump.sh)\tlinks inline code\tÃÄ inline code ÃÄ\tinline code highlight\t==highlight==\thighlight strike-through\t~~strikethrough~~\tstrikethrough footnote\tFootnote[^1]\tFootnote1 quotes\t&gt; quotes\t&gt; quotes "},{"title":"Titles & headings‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#titles--headings","content":"Heading 1: # A first-level titleHeading 2: ## A second-level titleHeading 3: ### A third-level title "},{"title":"Multi-line code blocks with language color syntax highlighting‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#multi-line-code-blocks-with-language-color-syntax-highlighting","content":"E.g.  ```json { &quot;hello&quot;: &quot;world&quot;, &quot;number&quot;: 1, &quot;boolean&quot;: true } ```  will render: { &quot;hello&quot;: &quot;world&quot;, &quot;number&quot;: 1, &quot;boolean&quot;: true }  "},{"title":"Information call-outs‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#information-call-outs","content":"Bump support information call-outs (of type info, warn, success or error) with the quote markdown syntax (lines starting with &gt; ) if the first line contains one of the call-out types. E.g. &gt; info &gt; this is an important information to **standout**  will render: info this is an important information to standout "},{"title":"Images‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#images","content":"Use the following syntax to add images in your markdown ![Alt text](/path/to/image.jpg &quot;Image title&quot;)  Note that even if it's a best practice to always add an alt text for an image, the parameters Alt text and &quot;Image title&quot; are optional. "},{"title":"Image sizing‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#image-sizing","content":"If you want to manually set the size of your image you can use Bump.sh =dimension parameter just before the closing parenthesis as: ![Alt text](/path/to/image.jpg &quot;Image title&quot; =dimension)  =dimension uses the following syntax: =[width][unit]x[height][unit]  for instance using =100pxx50px where 100 is the widthpx the unitx the separator50 the heightsecond px is unit again will output an image with 100 pixels height and 50 pixels width. At least one height or width parameter is mandatory, everything else being optional. =100pxx50px # with everything =100x50 # without unit =100 # without height (x separator not needed) and unit =100px # without height =x50 # without width and unit =x50px # without width  info If you don't specify a unit it will default to pixelIf you don't specify width or height, the other value will be a ratio calculated from the original size of the image so it doesn't shrink You can use any of the following CSS length units as unit: Absolute units: cm centimetersmm millimetersin inches (1in = 96px = 2.54cm)px pixels (1px = 1/96th of 1in)pt points (1pt = 1/72 of 1in)pc picas (1pc = 12 pt) Relative units: em relative to the font-size of the element (usually 1em = 16px)ex relative to the x-height of the current font (rarely used) ch relative to the width of the &quot;0&quot; (Unicode U +0030) in the current fontrem relative to font-size of the root element vw relative to 1% of the width of the viewport* vh relative to 1% of the height of the viewport* vmin relative to 1% of viewport's* smaller dimension vmax relative to 1% of viewport's* larger dimension % relative to the parent element "},{"title":"Markdown files as an external reference‚Äã","type":1,"pageTitle":"Markdown support","url":"/help/specifications-support/markdown-support/#markdown-files-as-an-external-reference","content":"Markdown files can be included as an external reference within your contract document with the $ref syntax $ref: &quot;./path/to/local-markdown.md&quot;. In the same way you can extract part of your contract (usually JSON schema of your models into dedicated *.yaml or *.json files), you can extract your markdown content into dedicated files too. E.g. Your OpenAPI contract api-contract.yml can thus looks like: openapi: 3.1.0 info: title: Bump API documentation version: 1.0.0 description: $ref: &quot;./docs/introduction.md&quot; x-topics: - title: Getting started content: $ref: &quot;./docs/getting-started.md&quot; - title: Use cases content: $ref: &quot;./docs/use-cases.md&quot; example: $ref: &quot;./docs/use-cases-examples.md&quot; servers: ... paths: ...  With files docs/introduction.md, docs/getting-started.md, docs/use-cases.md and docs/use-cases-examples.md right next to your contract document, you will be able to generate a comprehensive API documentation with nicely formatted content for your users. It's a great way to include ‚ÄúTopic‚Äù sections with handwritten content before the documentation of endpoints/webhooks (or channels in case of an AsyncAPI contract) in dedicated Markdown files. Thanks to the x-topics top-level property in your contract as explained in the dedicated help page. "},{"title":"OpenAPI support","type":0,"sectionRef":"#","url":"/help/specifications-support/openapi-support/","content":"","keywords":""},{"title":"Partially supported: securitySchemes (V3)¬†/¬†securityDefinitions (V2)‚Äã","type":1,"pageTitle":"OpenAPI support","url":"/help/specifications-support/openapi-support/#partially-supported-securityschemes-v3securitydefinitions-v2","content":"We support OpenAPI securitySchemes property (securityDefinitions with openAPI v2) with these authentication type values: httpapiKeyoauth2openIdConnect We do not support mutualTLS. To describe a mutualTLS authentication method, please use the x-topics property for now. "},{"title":"readOnly and writeOnly properties‚Äã","type":1,"pageTitle":"OpenAPI support","url":"/help/specifications-support/openapi-support/#readonly-and-writeonly-properties","content":"JSON Schema provides possibility to declare a property as read or write Only, with boolean fields writeOnly and readOnly (cf OpenAPI 3.0.3 or JSON Schema documentation). Basically, in REST API context, it means that a writeOnly property makes sense in request only (as password for example). Thus, we decided to hide a property defined as writeOnly when it belongs to a response. And a readOnly makes sense in response only (as created_at, updated_at, your call...). Similarly, we decided to hide a property defined as readOnly when it belongs to a request body. Thus, it becomes easy to use the same Schema Object in different contexts, for example as seen below: &quot;schema&quot;: { &quot;properties&quot;: { &quot;password&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;password&quot;, &quot;writeOnly&quot;: true }, &quot;created_at&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;date-time&quot;, &quot;readOnly&quot;: true } } }  "},{"title":"Add topics to your documentation‚Äã","type":1,"pageTitle":"OpenAPI support","url":"/help/specifications-support/openapi-support/#add-topics-to-your-documentation","content":"As this is not supported by OpenAPI, we created a custom property to enrich your documentation. Find out more in our dedicated section. "},{"title":"Polymorphism","type":0,"sectionRef":"#","url":"/help/specifications-support/polymorphism/","content":"Polymorphism Bump.sh fully supports polymorphism for OpenAPI and AsyncAPI, commonly called anyOf, oneOf and allOf. More details on these combinators can be found on each specification documentation: OpenAPIAsyncAPI To ease readability, we strongly recommend to give titles to your alternatives: it will help to identify and search them, specifically if you use this feature extensively. Here's an example of polymorphism in action: Discriminator Both OpenAPI and AsyncAPI specifications provide support of a discriminator field, to easily identify which schema is used. In our generated API documentation, this discriminator property is identified with a specific flag, and allowed value is explicit. In example provided above: type is the discriminator property between alternatives 'Human' or 'Pet'. Value has to be either human or pet.kind is the discriminator property between alternatives 'Dog' or 'Cat'. Value has to be either üêï or üêà.","keywords":""},{"title":"Name and sort endpoints and webhooks","type":0,"sectionRef":"#","url":"/help/specifications-support/openapi-support/name-and-sort-resources/","content":"","keywords":""},{"title":"Endpoints and Webhooks are resources‚Äã","type":1,"pageTitle":"Name and sort endpoints and webhooks","url":"/help/specifications-support/openapi-support/name-and-sort-resources/#endpoints-and-webhooks-are-resources","content":"REST APIs are composed of a set of possible requests, from server to server. In the API context, endpoints are most of the time URLs that provides the location of a specific resource on an API server. With OpenAPI, endpoints are stored under the resource paths. OR Webhooks are requests that can be generated from the API to the external server, after a specific event occurred. Webhooks are stored with OpenAPI 3.1 under resource webhooks Here's how we describe, sort and group these resources, based on an OpenAPI specification example. Below is an overview of the full specification you can find on OpenAPI Specification examples repo. openapi: &quot;3.0.0&quot; info: title: Swagger Petstore paths: /pets: get: summary: List all pets operationId: listPets tags: - all pets # ... post: summary: Create a pet operationId: createPets tags: - single pet # ... /pets/{petId}: get: summary: Info for a specific pet operationId: showPetById tags: - single pet # ...  There are three operations here, and three different ways to generate, group and order them, regarding option chosen for How to group operations?  "},{"title":"Group by tag‚Äã","type":1,"pageTitle":"Name and sort endpoints and webhooks","url":"/help/specifications-support/openapi-support/name-and-sort-resources/#group-by-tag","content":"caution Be careful about operations without tags when option Group operations by tag is selected, as they would be ignored! You may have noticed in the above API Contract that there are two different tags: all pets and single pet. If you choose option Group by tag, Bump.sh will use these tags to group, name and sort the operations. Here is our Petstore live example, based on the OpenAPI specification, with option Group by tag :  info If first level field tags are present at the root of your OpenAPI document object, Bump.sh will use Group by tags as a default documentation generation behaviour. Having this first level field tags allows you to override how your endpoints are ordered. Take the following API Contract sample: tags: - name: single pet description: all operations related to managing a single pet - name: all pets description: all operations related to managing all pets paths: # ...  With these first level tags, endpoints Single Pet would be displayed above All pets in the left menu of your documentation. Note that you can also provide a description for your tags. This description will be displayed just under the name of the tag at the top level of your tag documentation page. This option Group by tag allows a better customization of your doc, by overriding resources name. "},{"title":"Group by path‚Äã","type":1,"pageTitle":"Name and sort endpoints and webhooks","url":"/help/specifications-support/openapi-support/name-and-sort-resources/#group-by-path","content":"In this case, we deduce endpoint name from related path. First part of the path is extracted to generate the endpoint name, and every operation related to this endpoint name will be grouped together. Let's Bump it up to something visual with a Petstore live example:  Operations GET and POST from /pets , and GET from /pets/{petId} are grouped under same endpoint Pets (first part of the path), and their names are generated from field summary. "},{"title":"Webhooks‚Äã","type":1,"pageTitle":"Name and sort endpoints and webhooks","url":"/help/specifications-support/openapi-support/name-and-sort-resources/#webhooks","content":"And what about webhooks? It's quite well explained how webhooks name are generated from summary, description in Webhooks documentation's page. But by choosing option Group by tag, webhooks are displayed, grouped and ordered with same rules as for endpoints. caution Be careful about webhooks without tags when option Group by tag is selected, as they would be ignored! Two possibilities for this OpenAPI 3.1 documentation with endpoints and webhooks, on our examples hub: Resources grouped by pathResources grouped by tags Finally, we hope these options will help you build the most readable documentations, feel free to contact us if you need support or have some suggestion. "},{"title":"References","type":0,"sectionRef":"#","url":"/help/specifications-support/references/","content":"","keywords":""},{"title":"What is a reference?‚Äã","type":1,"pageTitle":"References","url":"/help/specifications-support/references/#what-is-a-reference","content":"A reference can be either a pointer to another part of your current specification or a pointer to an external file or URL. This lets you re-use part of a specification instead of duplicating it across your file(s). A reference is always described as follows in YAML: $ref: path/to/reference  You should note that OpenAPI and AsyncAPI specifications don't allow you to use references anywhere. However, Bump will resolve all the references found in your files, even if you didn't respect your specification. "},{"title":"The two types of references‚Äã","type":1,"pageTitle":"References","url":"/help/specifications-support/references/#the-two-types-of-references","content":""},{"title":"Internal references‚Äã","type":1,"pageTitle":"References","url":"/help/specifications-support/references/#internal-references","content":"Use this when you want to point to another part of your current file. Internal references always start with #/. Example: paths: /ping: description: Test your API status responses: 200: $ref: &quot;#/responses/pong&quot;  Internal references are always expanded by Bump. If a reference points on an empty path, the reference is just ignored. "},{"title":"External references‚Äã","type":1,"pageTitle":"References","url":"/help/specifications-support/references/#external-references","content":"Using external references is particularly useful as it can point to external resources like full definitions, components, models, etc... External references let you reuse your components across multiple projects without duplicating your specification code. You can find two kinds of external reference locations supported by Bump: URI: a resource hosted online and accessible through HTTPFile system path: a resource located on the same file system as your definition # URI $ref: https://example.com/api/specification.yml # File system path $ref: ./models/user.yml  info Bump supports absolute and relative paths for file system references. An external reference can also point to a subpart of the resource by adding a relative path after the absolute location: # URI $ref: https://example.com/api.yml#/models/user # File system path $ref: ./models.yml#/user  caution You can use recursive references if needed but we limit up to 5 recursive reference maximum. "},{"title":"How to deploy a specification with external references‚Äã","type":1,"pageTitle":"References","url":"/help/specifications-support/references/#how-to-deploy-a-specification-with-external-references","content":"Bump does support external references from any channel, so you can deploy a specification including them through the web app, the CLI, our GitHub action, or our API. caution Some limitations apply when using the web application though. Only references pointing to resources accessible by our servers will be resolved. This means that file system paths and protected URI will be ignored. If you need to deploy a specification using this kind of external references, please use our CLI or our GitHub Action "},{"title":"GitHub Action","type":0,"sectionRef":"#","url":"/help/continuous-integration/github-actions/","content":"","keywords":""},{"title":"Generate your API documentation & changelog‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#generate-your-api-documentation--changelog","content":"Bump is a Continuous Documentation Platform: it lets you keep your API doc always synchronized with your codebase. With this Github Action you can automatically generate your API reference (with changelog and diff) on Bump from any OpenAPI or AsyncAPI file. "},{"title":"Usage‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#usage","content":"Start by creating a documentation on Bump. Then add one of the following workflow file to your GitHub project. info In all the examples below, make sure to change the branch name main_with the name of your repository main destination branch, replace &lt;BUMP_DOC_ID&gt; with your Bump documentation slug or id and change the filepathdoc/api-documentation.yml_with your api specification file path. caution actions/checkout has to be called before our action. "},{"title":"Deploy on git push‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#deploy-on-git-push","content":"If you only need to deploy the documentation on push you can use this workflow file: .github/workflows/bump-deploy.yml name: Deploy documentation on: push: branches: - main jobs: deploy-doc: name: Deploy API doc on Bump runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Deploy API documentation uses: bump-sh/github-action@v1 with: doc: &lt;BUMP_DOC_ID&gt; token: ${{secrets.BUMP_TOKEN}} file: doc/api-documentation.yml  "},{"title":"API diff on pull requests‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#api-diff-on-pull-requests","content":"If you only want to have API diff summary sent as a comment on your pull requests: .github/workflows/bump-diff.yml name: API diff on: pull_request: branches: - main permissions: contents: read pull-requests: write jobs: api-diff: name: Check API diff on Bump runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Comment pull request with API diff uses: bump-sh/github-action@v1 with: doc: &lt;BUMP_DOC_ID&gt; token: ${{secrets.BUMP_TOKEN}} file: doc/api-documentation.yml command: diff env: GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}  "},{"title":"API diff on pull requests & Deploy on push‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#api-diff-on-pull-requests--deploy-on-push","content":"This is the most common workflow that we recommend, which will create two steps in your automation flow: a validation &amp; diff step on code reviews, followed by a deployment step on merged changes. .github/workflows/bump.yml name: Check &amp; deploy API documentation on: push: branches: - main pull_request: branches: - main permissions: contents: read pull-requests: write jobs: deploy-doc: if: ${{ github.event_name == 'push' }} name: Deploy API documentation on Bump runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Deploy API documentation uses: bump-sh/github-action@v1 with: doc: &lt;BUMP_DOC_ID&gt; token: ${{secrets.BUMP_TOKEN}} file: doc/api-documentation.yml api-diff: if: ${{ github.event_name == 'pull_request' }} name: Check API diff on Bump runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Comment pull request with API diff uses: bump-sh/github-action@v1 with: doc: &lt;BUMP_DOC_ID&gt; token: ${{secrets.BUMP_TOKEN}} file: doc/api-documentation.yml command: diff env: GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}  info Since February 2nd, 2023, the default GITHUB_TOKEN permissions are set to read-only for every new repository. Permissions have to be explicitly defined in your workflows, as illustrated above. "},{"title":"Input parameters‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#input-parameters","content":"doc (required): Documentation slug (or id). Can be found in the documentation settings on https://bump.sh/docs token (required): Do not add your documentation token here, but create an encrypted secret that holds your documentation token. Your Bump token can be found in the documentation settings on https://bump.sh. Copy it for later usage.In your GitHub repository, click Settings, and then Secrets.Click the button ‚ÄúNew repository secret‚Äù, name the secret BUMP_TOKEN and paste your Bump token in the value field. file: Relative path to the documentation file. Default: api-contract.yml. command: Bump command to execute. Default: __deploy deploy deploy a new version of the documentationdiff: automatically comment your pull request with the API diffdry-run: validate the documentation file before a deploymentpreview: create a temporary preview "},{"title":"Contributing‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#contributing","content":"Bug reports and pull requests are welcome on GitHub at https://github.com/bump-sh/github-action. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the Contributor Covenant code of conduct. "},{"title":"License‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#license","content":"The scripts and documentation in this project are released under the MIT License. "},{"title":"Code of Conduct‚Äã","type":1,"pageTitle":"GitHub Action","url":"/help/continuous-integration/github-actions/#code-of-conduct","content":"Everyone interacting in the Bump github-action project codebase, issue trackers, chat rooms and mailing lists is expected to follow the code of conduct. "},{"title":"Webhooks","type":0,"sectionRef":"#","url":"/help/specifications-support/openapi-support/webhooks/","content":"Webhooks One of the greatest new features provided by OpenAPI 3.1 is the support of webhooks. Indeed, a OpenAPI 3.1 documentation may include paths and / or webhooks, when paths were required for previous version. Every webhook has a required keyName, and some operations. If we follow this example, provided for OpenAPI 3.1 by OpenAPI Initiative: webhooks: # Each webhook needs a name newPet: # This is a Path Item Object, the only difference is that the request is initiated by the API provider post: description: A new pet arrived, let's come and discover it IRL. requestBody: description: Information about a new pet in the system content: application/json: schema: $ref: &quot;#/components/schemas/Pet&quot; responses: &quot;200&quot;: description: Return a 200 status to indicate that the data was received successfully Here, there is a single webhook whom keyName is newPet , and a POST operation. If such a documentation was generated by Bump (see live documentation): Webhook's name is deduced from the keyName.Webhook's operation name is extracted from field summary.As for endpoints, webhook has body parameters, responses... and some curl and request payloadexamples are generated. Furthermore, webhooks are fully compatible with UI customization How to group operations? By adding some tags to your webhooks, you can re-organize how webhooks are named, sorted, and how webhooks operations are sorted.","keywords":""}]