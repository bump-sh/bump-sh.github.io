"use strict";(self.webpackChunkbump_sh_github_io=self.webpackChunkbump_sh_github_io||[]).push([[1487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),f=i,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9775:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},a="Polymorphism",p={unversionedId:"specifications-support/polymorphism",id:"specifications-support/polymorphism",title:"Polymorphism",description:"Bump.sh fully supports polymorphism for OpenAPI and AsyncAPI, commonly called anyOf, oneOf and allOf.",source:"@site/docs/help/specifications-support/polymorphism.md",sourceDirName:"specifications-support",slug:"/specifications-support/polymorphism",permalink:"/help/specifications-support/polymorphism",draft:!1,editUrl:"https://github.com/bump-sh/docs/tree/main/docs/help/specifications-support/polymorphism.md",tags:[],version:"current",frontMatter:{},sidebar:"help",previous:{title:"Markdown support",permalink:"/help/specifications-support/markdown-support"},next:{title:"References",permalink:"/help/specifications-support/references"}},s={},l=[],c={toc:l};function m(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"polymorphism"},"Polymorphism"),(0,i.kt)("p",null,"Bump.sh fully supports polymorphism for OpenAPI and AsyncAPI, commonly called anyOf, oneOf and allOf.\nMore details on these combinators can be found on each specification documentation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://spec.openapis.org/oas/v3.1.0#discriminator-object"},"OpenAPI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.asyncapi.com/docs/reference/specification/v2.5.0#schemaComposition"},"AsyncAPI"))),(0,i.kt)("p",null,"To ease readability, we strongly recommend to give titles to your alternatives: it will help to identify and search them, specifically if you use this feature extensively."),(0,i.kt)("p",null,"Here's an ",(0,i.kt)("a",{parentName:"p",href:"https://bump.sh/bump/doc/petstore-alternatives#operation-post-pets-body-animal-cat-species-species-alternative"},"example of polymorphism")," in action:"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8070).Z,width:"990",height:"824"}))),(0,i.kt)("h1",{id:"discriminator"},"Discriminator"),(0,i.kt)("p",null,"Both OpenAPI and AsyncAPI specifications provide support of a ",(0,i.kt)("inlineCode",{parentName:"p"},"discriminator")," field,\nto easily identify which schema is used."),(0,i.kt)("p",null,"In our generated API documentation, this ",(0,i.kt)("inlineCode",{parentName:"p"},"discriminator")," property is identified\nwith a specific flag, and allowed value is explicit."),(0,i.kt)("p",null,"In example provided above:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," is the discriminator property between alternatives 'Human' or 'Pet'. Value has to be either ",(0,i.kt)("inlineCode",{parentName:"li"},"human")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"pet"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kind")," is the discriminator property between alternatives 'Dog' or 'Cat'. Value has to be either ",(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udc15")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"\ud83d\udc08"),".")))}m.isMDXComponent=!0},8070:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/anyOf-discriminator-390bcaaf67df443eea853de28c376a89.gif"}}]);